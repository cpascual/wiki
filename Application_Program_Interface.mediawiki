The Application Program Interface (API) has been developed to facilitate the reading and writing of NeXus files. Those writing applications to produce NeXus files are encouraged to use the API in order to ensure compliance with the NeXus standard. The latest version supports the reading and writing of HDF4, HDF5, and, in the latest CVS version, XML files.

The core routines have been written in C but wrappers are available for a number of other languages including Fortran 77, Fortran 90, Java, and IDL (with Python and others under development). The API makes the reading and writing of NeXus files transparent; the user doesn't even need to know the underlying format when reading a file since the API calls are the same.

==Purpose of API==
The NeXus Application Program Interface is a suite of subroutines, written in C but with wrappers in Fortran 77 and 90. The subroutines call HDF routines to read and write the NeXus files with the correct structure. An API serves a number of useful purposes:
#It simplifies the reading and writing of NeXus files.
#It ensures a certain degree of compliance with the NeXus standard.
#It allows the development of sophisticated input/output features such as automatic unit conversion. This has not been implemented yet.
#It hides the implementation details of the format. In particular, the API can read and write HDF4, HDF5 (and shortly XML) files using the same routines.
For these reasons, we request that all NeXus files are written using the supplied API. We cannot be sure that anything written using the underlying HDF API will be recognized by NeXus-aware utilities.

==Core API==
The core API provides the basic routines for reading, writing and navigating NeXus files. It is designed to be modal; there is a hidden state that determines which groups and data sets are open at any given moment, and subsequent operations are implicitly performed on these entities. This cuts down the number of parameters to pass around in API calls, at the cost of forcing a certain pre-approved mode d'emploi. This mode d'emploi will be familiar to most: it is very similar to navigating a directory hierarchy; in our case, NeXus groups are the directories, which contain data sets and/or other directories.

The core API comprises the following functional groups:
*General initialization and shutdown: opening and closing the file, creating or opening an existing group or dataset, and closing them.
*Reading and writing data and attributes to previously opened datasets.
*Routines to obtain meta-data and to iterate over component datasets and attributes.
*Handling of linking and group hierarchy.
===List of Routines===
{| {{Tablestyle}}
|-
! {{Headcellstyle}} colspan="2" | General Initialization and Shutdown
|-
| width="30%" | [[NAPI Routines|NXopen]]
| width="70%" | Opens NeXus file and returns file id
|-
|[[NAPI Routines#NXclose|NXclose]] || Closes NeXus file
|-
|[[NAPI Routines#NXmakegroup|NXmakegroup]] || Creates NeXus group
|-
|[[NAPI Routines#NXopengroup|NXopengroup]] || Opens existing NeXus group for input/output
|-
|[[NAPI Routines#NXclosegroup|NXclosegroup]] || Closes NeXus group
|-
|[[NAPI Routines#NXmakedata|NXmakedata]] || Creates NeXus data set
|-
|[[NAPI Routines#NXcompmakedata|NXcompmakedata]] || Creates a compressed NeXus data set
|-
|[[NAPI Routines#NXopendata|NXopendata]] || Opens existing NeXus data set for input/output
|-
|[[NAPI Routines#NXcompress|NXcompress]] || Marks the NeXus data set for compression
|-
|[[NAPI Routines#NXclosedata|NXclosedata]] || Closes NeXus data set
|-
! {{Template:Headcellstyle}} colspan="2" | Reading and Writing
|-
|[[NAPI Routines#NXgetdata|NXgetdata]] || Reads data from currently open data set
|-
|[[NAPI Routines#NXgetslab|NXgetslab]] || Reads a subset of the currently open data set
|-
|[[NAPI Routines#NXgetattr|NXgetattr]] || Reads sdata attribute from open data set
|-
|[[NAPI Routines#NXputdata|NXputdata]] || Writes data into the currently open data set
|-
|[[NAPI Routines#NXputslab|NXputslab]] || Writes a subset of data into the currently open data set
|-
|[[NAPI Routines#NXputattr|NXputattr]] || Writes an attribute of the currently open data set
|-
|[[NAPI Routines#NXflush|NXflush]] || Flushes output to a data file
|-
! {{Template:Headcellstyle}} colspan="2" | Meta-Data Routines
|-
|[[NAPI Routines#NXgetinfo|NXgetinfo]] || Gets rank, dimensions and type of currently open data set
|-
|[[NAPI Routines#NXgetgroupinfo|NXgetgroupinfo]] || Returns the number of items, and the name and class of the current group
|-
|[[NAPI Routines#NXinitgroupdir|NXinitgroupdir]] || Initializes a group's directory search
|-
|[[NAPI Routines#NXgetnextentry|NXgetnextentry]] || Implements a directory search of the currently open group
|-
|[[NAPI Routines#NXgetattrinfo|NXgetattrinfo]] || Returns the number of attributes of the current data set
|-
|[[NAPI Routines#NXinitattrdir|NXinitattrdir]] || Initializes a data set's attribute search
|-
|[[NAPI Routines#NXgetnextattr|NXgetnextattr]] || Implements a search of all the attributes of the currently open data set
|-
! {{Template:Headcellstyle}} colspan="2" | Linking and Group Hierarchy
|-
|[[NAPI Routines#NXgetgroupID|NXgetgroupID]] || Returns the identifier of the currently open group as an NXlink structure
|-
|[[NAPI Routines#NXgetdataID|NXgetdataID]] || Returns the identifier of the currently open data set
|-
|[[NAPI Routines#NXmakelink|NXmakelink]] || Links a data item (group or set) to another group
|-
! {{Template:Headcellstyle}} colspan="2" | Memory Allocation
|-
|[[NAPI Routines#NXmalloc|NXmalloc]] || Allocates memory for NeXus data
|-
|[[NAPI Routines#NXfree|NXfree]] || Frees previously allocated memory
|}

===C Interface===
C programs that call the above routines should include the following header file:
<pre>#include "napi.h"</pre>

===Fortran 77 Interface===
Wrapper routines to interface the Fortran and C code have been developed by Freddie Akeroyd. The routines have the same names and argument lists as the corresponding C routines, although we have added extra routines for the input/output of character data and attributes. Care must be taken to ensure enough space is allocated for the input/output operations being performed.

It is necessary to reverse the order of indices in multidimensional arrays, compared to an equivalent C program, so that data are stored in the same order in the NeXus file.

Any program using the F77 API needs to include the following line near the top in order to define the required constants (NXHANDLESIZE, NXLINKSIZE, etc.) :
<pre>include 'NAPIF.INC'</pre>

Use the following table to convert from the C data types listed with each routine to the F77 data types.
{| {{Tablestyle}}
|-
! {{Headcellstyle}} width="50%" | C
! {{Headcellstyle}} width="50%" | Fortran 77
|-
| int a, int* a || INTEGER A
|-
|char* a || CHARACTER*(*) A
|-
|NXhandle a, NXhandle* a || INTEGER A(NXHANDLESIZE)
|-
|NXstatus	|| INTEGER
|-
|int[] a || INTEGER A(*)
|-
|void* a || REAL A(*) or DOUBLE A(*) or INTEGER A(*)
|-
|NXlink a, NXlink* a || INTEGER A(NXLINKSIZE)
|}

===Fortran 90 Interface===
The Fortran 90 interface is a wrapper to the C interface with nearly identical routine definitions. As with the Fortran 77 interface, it is necessary to reverse the order of indices in multidimensional arrays, compared to an equivalent C program, so that data are stored in the same order in the NeXus file.

Any program using the F90 API needs to put the following line at the top (after the PROGRAM statement) :
<pre>
use NXmodule
</pre>

Use the following table to convert from the C data types listed with each routine to the Fortran 90 data types.
{| {{Tablestyle}}
|-
! {{Headcellstyle}} width="50%" | C
! {{Headcellstyle}} width="50%" | Fortran 90
|-
| int, int* || integer
|-
|char* || character(len=*)
|-
|NXhandle, NXhandle* || type(NXhandle)
|-
|NXstatus	|| integer
|-
|int[] || integer(:)
|-
|void* || real(:) <br> integer(:) <br> character(len=*)
|-
|NXlink a, NXlink* a || type(NXlink)
|}
The following parameters, which are defined in NXmodule, may be used in defining variables.
{| {{Tablestyle}}
|-
! {{Headcellstyle}} width="25%" | Name
! {{Headcellstyle}} width="50%" | Description
! {{Headcellstyle}} width="25%" | Value
|-
|NX_MAXRANK||Maximum number of dimensions||align="center"|32
|-
|NX_MAXNAMELEN||Maximum length of NeXus name||align="center"|64
|-
|NXi1||Kind parameter for a 1-byte integer||align="center"|selected_int_kind(2)
|-
|NXi2||Kind parameter for a 2-byte integer||align="center"|selected_int_kind(4)
|-
|NXi4||Kind parameter for a 4-byte integer||align="center"|selected_int_kind(8)
|-
|NXr4||Kind parameter for a 4-byte real||align="center"|kind(1.0)
|-
|NXr8||Kind parameter for an 8-byte real||align="center"|kind(1.0D0)
|}

===Java Interface===
NeXus for Java provides access to NeXus data files for programs written in Java. This API was implemented by Java code calling the original C language NeXus API through the Java Native Methods Interface.
*[[Java API|Description of NeXus-Java interface]]

===IDL Interface===
IDL is an interactive data evaluation environment developed by Research Systems. It is an interpreted language for data manipulation and visualization. Part of IDL is an HDF-interface. In order to facilitate the import of NeXus files into this popular data manipulation package, the NeXus-API was reimplemented in the IDL language by Mark Koennecke. The package may be downloaded as a tar file from <ftp://ftp.neutron.anl.gov/nexus/nidl.tar>.
*[[IDL API|Description of NeXus-IDL interface]]

==Utility API==

The NeXus F90 Utility API provides a number of routines that combine the operations of various core API routines in order to simplify the reading and writing of NeXus files. At present, they are only available as a Fortran 90 module but a C version is in preparation.

The utility API comprises the following functional groups:
*Routines to read or write data.
*Routines to find if groups, data, or attributes exist, and to find data with specific signal or axis attributes i.e. to identify valid data or axes.
*Routines to open other groups to which NXdata items are linked, and to return again.
Any program using the F90 Utility API needs to put the following line near the top of the program (N.B. do not put USE statements for both NXmodule and NXUmodule; the former is included in the latter) :
<pre>
use NXUmodule
</pre>
===List of Routines===
{| {{Tablestyle}}
|-
! {{Headcellstyle}} colspan="2" | Reading and Writing
|-
| width="30%" | [[NAPI Utility Routines#NXUwriteglobals|NXUwriteglobals]]
| width="70%" | Writes all the valid global attributes of a file.
|-
|[[NAPI Utility Routines#NXUwritegroup|NXUwritegroup]] || Opens a group (creating it if necessary).
|-
|[[NAPI Utility Routines#NXUwritedata|NXUwritedata]] || Opens a data item (creating it if necessary) and writes data and its units.
|-
|[[NAPI Utility Routines#NXUreaddata|NXUreaddata]] || Opens and reads a data item and its units.
|-
|[[NAPI Utility Routines#NXUwritehistogram|NXUwritehistogram]] || Opens one dimensional data item (creating it if necessary) and writes histogram centers and their units.
|-
|[[NAPI Utility Routines#NXUreadhistogram|NXUreadhistogram]] || Opens and reads a one dimensional data item and converts it to histogram bin boundaries.
|-
|[[NAPI Utility Routines#NXUsetcompress|NXUsetcompress]] || Defines the compression algorithm and minimum dataset size for subsequent write operations.
|-
! {{Template:Headcellstyle}} colspan="2" | Finding Groups, Data, and Attributes
|-
|-
|[[NAPI Utility Routines#NXUfindclass|NXUfindclass]] || Returns the name of a group of the specified class if it is contained within the currently open group.
|-
|[[NAPI Utility Routines#NXUfinddata|NXUfinddata]] || Checks whether a data item of the specified name is contained within the currently open group.
|-
|[[NAPI Utility Routines#NXUfindattr|NXUfindattr]] || Checks whether the currently open data item has the specified attribute.
|-
|[[NAPI Utility Routines#NXUfindsignal|NXUfindsignal]] || Searches the currently open group for a data item with the specified SIGNAL attribute.
|-
|[[NAPI Utility Routines#NXUfindaxis|NXUfindaxis]] || Searches the currently open group for a data item with the specified AXIS attribute.
|-
! {{Template:Headcellstyle}} colspan="2" | Finding Linked Groups
|-
|[[NAPI Utility Routines#NXUfindlink|NXUfindlink]] || Finds another link to the specified NeXus data item and opens the group it is in.
|-
|[[NAPI Utility Routines#NXUresumelink|NXUresumelink]] || Reopens the original group from which NXUfindlink was used.
|}
Currently, the F90 utility API will only write character strings, 4-byte integers and reals, and 8-byte reals. It can read other integer sizes into four-byte integers, but does not differentiate between signed and unsigned integers.
Here are two example programs which make heavy use of the Utility API.

[[NXbrowse.f90]] provides a simple terminal browser of any NeXus file. When compiled and linked with the NeXus API, it can be run interactively. Type HELP to obtain a list of available commands. (Please note that this version of the browser has now been superceded by a version written in C. Only the C version is now included in the Makefile distributed with the API.)

[[NXlrcs.f90]] is a program for converting IPNS data from the LRMECS chopper spectrometer into NeXus format. It cannot be run without linking to the IPNS run-file modules (not provided), but gives an example of how to write such programs.

==Example NeXus program==
The following code reads a two-dimensional set 'counts' with dimension scales of 't' and 'phi' using local routines, and then writes a NeXus file containing a single NXentry group and a single NXdata group. This is the simplest data file that conforms to the NeXus standard.

===C Version===
<pre>
#include "napi.h"

int main()
{
    int counts[50][1000], n_t, n_p, dims[2], i;
    float t[1000], phi[50];
    NXhandle file_id;
/* Read in data using local routines */
    getdata (n_t, t, n_p, phi, counts);
/* Open output file and output global attributes */
    NXopen ('NXfile.nxs', NXACC_CREATE, &file_id);
      NXputattr (file_id, "user_name", "Joe Bloggs", 10, NX_CHAR);
/* Open top-level NXentry group */
      NXmakegroup (file_id, "Entry1", "NXentry");
      NXopengroup (file_id, "Entry1", "NXentry");
/* Open NXdata group within NXentry group */
        NXmakegroup (file_id, "Data1", "NXdata");
        NXopengroup (file_id, "Data1", "NXdata");
/* Output time channels */
          NXmakedata (file_id, "time_of_flight", NX_FLOAT32, 1, &n_t);
          NXopendata (file_id, "time_of_flight")
            NXputdata (file_id, t);
            NXputattr (file_id, "units", "microseconds", 12, NX_CHAR);
          NXclosedata (file_id);
/* Output detector angles */
          NXmakedata (file_id, "polar_angle", NX_FLOAT32, 1, &n_p);
          NXopendata (file_id, "polar_angle")
            NXputdata (file_id, phi);
            NXputattr (file_id, "units", "degrees", 7, NX_CHAR);
          NXclosedata (file_id);
/* Output data */
          dims[0] = n_t;
          dims[1] = n_p;
          NXmakedata (file_id, "counts", NX_INT32, 2, dims);
          NXopendata (file_id, "counts")
            NXputdata (file_id, counts);
            i = 1;
            NXputattr (file_id, "signal", &i, 1, NX_INT32);
            NXputattr (file_id, "axes",  "polar_angle:time_of_flight", 26, NX_CHAR);
          NXclosedata (file_id);
/* Close NXentry and NXdata groups and close file */
        NXclosegroup (file_id);
      NXclosegroup (file_id);
    NXclose (&file_id);
    return;
}
</pre>

===Fortran 77 Version===
<pre>
      program WRITEDATA
      
      include 'NAPIF.INC'
      integer*4 status, file_id(NXHANDLESIZE), counts(1000,50), n_p, n_t, dims(2)
      real*4 t(1000), phi(50)

!Read in data using local routines
      call getdata (n_t, t, n_p, phi, counts)
!Open output file
      status = NXopen ('NXFILE.NXS', NXACC_CREATE, file_id)
        status = NXputcharattr 
     +         (file_id, 'user', 'Joe Bloggs', 10, NX_CHAR)
!Open top-level NXentry group
        status = NXmakegroup (file_id, 'Entry1', 'NXentry')
        status = NXopengroup (file_id, 'Entry1', 'NXentry')
!Open NXdata group within NXentry group
          status = NXmakegroup (file_id, 'Data1', 'NXdata')
          status = NXopengroup (file_id, 'Data1', 'NXdata')
!Output time channels
            status = NXmakedata 
     +         (file_id, 'time_of_flight', NX_FLOAT32, 1, n_t)
            status = NXopendata (file_id, 'time_of_flight')
              status = NXputdata (file_id, t)
              status = NXputcharattr 
     +         (file_id, 'units', 'microseconds', 12, NX_CHAR)
            status = NXclosedata (file_id)
!Output detector angles
            status = NXmakedata (file_id, 'polar_angle', NX_FLOAT32, 1, n_p)
            status = NXopendata (file_id, 'polar_angle')
              status = NXputdata (file_id, phi)
              status = NXputcharattr (file_id, 'units', 'degrees', 7, NX_CHAR)
            status = NXclosedata (file_id)
!Output data
            dims(1) = n_t
            dims(2) = n_p
            status = NXmakedata (file_id, 'counts', NX_INT32, 2, dims)
            status = NXopendata (file_id, 'counts')
              status = NXputdata (file_id, counts)
              status = NXputattr (file_id, 'signal', 1, 1, NX_INT32)
              status = NXputattr
     +          (file_id, 'axes', 'polar_angle:time_of_flight', 26, NX_CHAR)
            status = NXclosedata (file_id)
!Close NXdata and NXentry groups and close file
          status = NXclosegroup (file_id)
        status = NXclosegroup (file_id)
      status = NXclose (file_id)

      stop
      end
</pre>

===Fortran 90 Version===
<pre>
program WRITEDATA
      
   use NXUmodule

   type(NXhandle) :: file_id
   integer, pointer :: counts(:,:)
   real, pointer :: t(:), phi(:)

!Use local routines to allocate pointers and fill in data
   call getlocaldata (t, phi, counts)
!Open output file
   if (NXopen ("NXfile.nxs", NXACC_CREATE, file_id) /= NX_OK) stop
   if (NXUwriteglobals (file_id, user="Joe Bloggs") /= NX_OK) stop
!Set compression parameters
   if (NXUsetcompress (file_id, NX_COMP_LZW, 1000) /= NX_OK) stop
!Open top-level NXentry group
   if (NXUwritegroup (file_id, "Entry1", "NXentry") /= NX_OK) stop
   !Open NXdata group within NXentry group
      if (NXUwritegroup (file_id, "Data1", "NXdata") /= NX_OK) stop
   !Output time channels
         if (NXUwritedata (file_id, "time_of_flight", t, "microseconds") /= NX_OK) stop
   !Output detector angles
         if (NXUwritedata (file_id, "polar_angle", phi, "degrees") /= NX_OK) stop
   !Output data
         if (NXUwritedata (file_id, "counts", counts, "counts") /= NX_OK) stop
            if (NXputattr (file_id, "signal", 1) /= NX_OK) stop
            if (NXputattr (file_id, "axes", "polar_angle:time_of_flight") /= NX_OK) stop
   !Close NXdata group
      if (NXclosegroup (file_id) /= NX_OK) stop
!Close NXentry group
   if (NXclosegroup (file_id) /= NX_OK) stop
!Close NeXus file
   if (NXclose (file_id) /= NX_OK) stop

end program WRITEDATA
</pre>

==Downloading the API==
The NeXus API is distributed under the terms of the GNU Lesser General Public License.

===External Libraries===
Since NeXus uses HDF as the underlying binary format, it is necessary first to install the HDF subroutine libraries and include files before installing the NeXus API. It is not usually necessary to download the HDF source code since precompiled object libraries exist for a variety of operating systems including Windows, Mac OS X, Linux, and various other flavors of Unix. Check the HDF web pages for more information:
*http://hdf.ncsa.uiuc.edu/
The latest beta version of the NeXus API allows the reading and writing of NeXus files in XML. This uses the Mini-XML library, developed by Michael Sweet, which is also available as a precompiled binary library for several operating systems. Please ensure that you install version 2.2.2 or later. Check the Mini-XML web pages for more information:
*http://www.easysw.com/~mike/mxml/

===Source Code Distribution===
The NeXus API may be built from source by downloading one of the installation kits from the NeXus CVS server. The compilation uses the GNU Autotools. Download the appropriate gzipped tar file, unpack it, and run the standard configure procedure from the resulting nexus directory 
<pre>
% tar -zxvf nexus-3.0.0.tar.gz
% cd nexus
% ./configure
% make
% make install
</pre>
To find out how to customize the installation, ''e.g.'', to choose different installation directories, type
<pre>
% ./configure --help
</pre>
See the README file for further instructions.
*[http://nexus.isis.rl.ac.uk/cgi-bin/viewcvs.cgi/cvs_root.tar.gz?tarball=1&only_with_tag=NEXUS_2_0_0 Download NeXus API v2.0.0]
*[http://nexus.isis.rl.ac.uk/kits/nexus-latest.tar.gz Download latest CVS version]

===RPM Distribution Kits===
To install and use NeXus you will need to install all of the binary RPMS - these were built on a Fedora Core 2 Linux machine. Install using
<pre>
rpm -Uvh file.i386.rpm
</pre>
or to change installation location from the default area (/usr/local) use
<pre>
rpm -Uvh --prefix /alternative/directory file.i386.rpm
</pre>
If the binary RPMS are not the correct architecture for you (e.g. you need x64 rather than i386), instead download the Source RPM (.src.rpm) and build a binary RPM for you machine using
<pre>
rpmbuild --rebuild file.src.rpm
</pre>
This should then give you a binary RPM file file.something.rpm which you can install as above. Be careful if you think about specifying an alternative buildroot for rpmbuild by using --buildroot option as the "buildroot" directory tree will get remove (so --buildroot / is a really bad idea). Only change buildroot it if the default area turns out not to be big enough to compile the package.

The following packages are required:
{| {{Tablestyle}}
|-
! {{Headcellstyle}} width="20%" | SZIP
| align="center" width="40%" | [http://nexus.isis.rl.ac.uk/kits/rpm/szip-2.0-1.i386.rpm i386 Binary RPM]| 
| align="center" width="40%" | [http://nexus.isis.rl.ac.uk/kits/rpm/szip-2.0-1.src.rpm Source RPM]
|-
! {{Headcellstyle}} | HDF4
| align="center" | [http://nexus.isis.rl.ac.uk/kits/rpm/hdf-4.2.1-1.i386.rpm i386 Binary RPM]
| align="center" | [http://nexus.isis.rl.ac.uk/kits/rpm/hdf-4.2.1-1.src.rpm Source RPM]
|-
! {{Headcellstyle}} | HDF5
| align="center" | [http://nexus.isis.rl.ac.uk/kits/rpm/hdf5-1.6.4-1.i386.rpm i386 Binary RPM]
| align="center" | [http://nexus.isis.rl.ac.uk/kits/rpm/hdf5-1.6.4-1.src.rpm Source RPM]
|-
! {{Headcellstyle}} | MXML
| align="center" | [http://nexus.isis.rl.ac.uk/kits/rpm/mxml-2.2.2-1.i386.rpm i386 Binary RPM]
| align="center" | [http://nexus.isis.rl.ac.uk/kits/rpm/mxml-2.2.2-1.src.rpm Source RPM]
|-
! {{Headcellstyle}} | NeXus
| align="center" | [http://www.nexus.anl.gov/nexus-3.0.0-1.i386.rpm i386 Binary RPM]
| align="center" | [http://www.nexus.anl.gov/nexus-3.0.0-1.src.rpm Source RPM]
|}

===CYGWIN Kits===
You need to install the HDF4, SZIP and JPEG libraries before you can compile a NeXus distribution kit.  They are combined in a single gzipped tar file here.
*[http://nexus.isis.rl.ac.uk/kits/cygwin/hdf42r1.tar.gz http://nexus.isis.rl.ac.uk/kits/cygwin/hdf42r1.tar.gz]
After downloading it, do the following:
<pre>
cd /usr/local
gunzip hdf42r1.tar.gz
tar xf hdf42r1.tar
</pre>
It should create /usr/local/hdf/* directories ''etc.''

Then you can build NeXus using the instructions for source code installations above.

==Reporting Bugs in the NeXus API==
If you encounter any bugs in the installation or running of the NeXus API, please report them online using the ISIS Bugzilla reporting system.
*[http://bugs.isis.rl.ac.uk/buglist.cgi?query_format=specific&order=relevance+desc&bug_status=__open__&product=NeXus&content= List current NeXus bug reports]
*[http://bugs.isis.rl.ac.uk/enter_bug.cgi?product=NeXus Enter a new NeXus bug report]