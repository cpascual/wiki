==Time-of-Flight Working Group==
*[[User:Freddie Akeroyd|Freddie Akeroyd]]
*[[User:Franck Cecillon|Franck Cecillon]]
*[[User:Ray Osborn|Ray Osborn]]
*[[User:Peter Peterson|Peter Peterson]]
*[[User:Thomas Proffen|Thomas Proffen]]
*[[User:Jiro Suzuki|Jiro Suzuki]]

== Inheritance ==

We would use a period (.) in a class name to denote inheritance and so define classes called NXdetector.area and NXdetector.point which would imply they inherited from NXdetector. The API would need a minor change so that is you asked for '''getnext("NXdetector")''' it would not look for an exact match of this string, but look for any NeXus class that started with the prefix "detector" and so would return either an NXarea_detector or NXpoint_detector etc.

Following an inheritance system would allow for clearer definitions

== NXdetector ==

Three types: point, linear and area

== NXdetector.point ==

A collection of pixels '''i''' over some surface. Defined by:

polar_angle[i]
distance[i]
solid_angle[i]

If desired, additional information about pixels (shape, engineering position) can be added via an NXgeometry[i]

== NXdetector.linear ==
NXgeometry[i] defines tube centre and
pixel_edge[j+1] defines the edges of the pixels - if a pixel_size[j] array is also present it means the pixels have "dead space" between them  

== NXdetector.area ==

NXgeometry defines tube centre
xoffet[i+1] and yoffset[j+1] defines edges of pixels